{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNy/MNLJbvFzYwbp6XySiQ4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/amandaveloso/elasticsearch_request/blob/main/requisicao_elasticsearch.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iH3HMHkTu9mR"
      },
      "outputs": [],
      "source": [
        "import requests\n",
        "from io import StringIO\n",
        "import pandas as pd\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "campos = [\n",
        "    \"_id\",\n",
        "    \"_index\",\n",
        "    \"_score\",\n",
        "    \"_type\",\n",
        "    \"acknowledgment\",\n",
        "    \"amendment\",\n",
        "    \"amendment_additional_info\",\n",
        "    \"amendment_list\",\n",
        "    \"appeal_type\",\n",
        "    \"authority\",\n",
        "    \"authority_chamber\",\n",
        "    \"authority_class\",\n",
        "    \"authority_main\",\n",
        "    \"authority_section\",\n",
        "    \"cite_doctrine_text\",\n",
        "    \"cite_jurisprudence_text\",\n",
        "    \"cite_legislation_found\",\n",
        "    \"cite_legislation_list\",\n",
        "    \"cite_legislation_text\",\n",
        "    \"cnj_ancestors_id_list\",\n",
        "    \"cnj_ancestors_name_list\",\n",
        "    \"cnj_class_name_list\",\n",
        "    \"cnj_theme_id_list\",\n",
        "    \"cnj_theme_name_list\",\n",
        "    \"cnj_topic_id_list\",\n",
        "    \"cnj_topic_name_list\",\n",
        "    \"companies_extraction_date\",\n",
        "    \"company_count\",\n",
        "    \"company_extraction_from_field\",\n",
        "    \"company_list\",\n",
        "    \"company_positions_list\",\n",
        "    \"court_code\",\n",
        "    \"currency_count\",\n",
        "    \"currency_list\",\n",
        "    \"date\",\n",
        "    \"date_collected\",\n",
        "    \"date_distribution\",\n",
        "    \"date_publish\",\n",
        "    \"date_register\",\n",
        "    \"date_session\",\n",
        "    \"day\",\n",
        "    \"decision_id\",\n",
        "    \"decision_movements\",\n",
        "    \"decision_references\",\n",
        "    \"decision_text\",\n",
        "    \"decision_theme\",\n",
        "    \"decision_thesis\",\n",
        "    \"defendant\",\n",
        "    \"degree\",\n",
        "    \"degree_number\",\n",
        "    \"description\",\n",
        "    \"description_ws\",\n",
        "    \"district\",\n",
        "    \"document_type\",\n",
        "    \"effect_modulation\",\n",
        "    \"enunciated\",\n",
        "    \"file_url\",\n",
        "    \"forum\",\n",
        "    \"gazette_url\",\n",
        "    \"has_company_citations\",\n",
        "    \"has_value\",\n",
        "    \"hash_id\",\n",
        "    \"hierarchy_score\",\n",
        "    \"indexing\",\n",
        "    \"judge\",\n",
        "    \"judge_others_list\",\n",
        "    \"judgment\",\n",
        "    \"justice_secret\",\n",
        "    \"lawyers\",\n",
        "    \"legal_relevance_coefficient\",\n",
        "    \"legislation_list\",\n",
        "    \"locality\",\n",
        "    \"max_value\",\n",
        "    \"max_value_currency\",\n",
        "    \"min_value\",\n",
        "    \"min_value_currency\",\n",
        "    \"ml_processors_versions\",\n",
        "    \"month\",\n",
        "    \"notes\",\n",
        "    \"observation\",\n",
        "    \"original_decision_judgment\",\n",
        "    \"original_district\",\n",
        "    \"original_doc_id\",\n",
        "    \"original_process_id\",\n",
        "    \"other_authority\",\n",
        "    \"parts\",\n",
        "    \"petitioners\",\n",
        "    \"process_and_decisions_urls\",\n",
        "    \"process_id\",\n",
        "    \"publication_gazzete\",\n",
        "    \"respondents\",\n",
        "    \"result\",\n",
        "    \"similar_judgments\",\n",
        "    \"situation\",\n",
        "    \"source\",\n",
        "    \"source_file_text\",\n",
        "    \"source_file_text_ws\",\n",
        "    \"source_file_texts\",\n",
        "    \"source_file_uri\",\n",
        "    \"source_file_uri_pdf\",\n",
        "    \"source_file_uris\",\n",
        "    \"source_file_url\",\n",
        "    \"source_file_urls\",\n",
        "    \"source_url\",\n",
        "    \"state_code\",\n",
        "    \"state_description\",\n",
        "    \"tax_contribuitor\",\n",
        "    \"tax_topic\",\n",
        "    \"title\",\n",
        "    \"title_ws\",\n",
        "    \"titleclean\",\n",
        "    \"topic_name_list\",\n",
        "    \"urls\",\n",
        "    \"urn\",\n",
        "    \"value_extraction_date\",\n",
        "    \"value_positions_list\",\n",
        "    \"value_request_types.classification_date\",\n",
        "    \"value_request_types.occurrences\",\n",
        "    \"vara\",\n",
        "    \"year\",\n",
        "]\n",
        "\n",
        "meta_fields = [\n",
        "    \"_source\",\n",
        "    \"_id\",\n",
        "    \"_type\",\n",
        "    \"_index\",\n",
        "    \"_score\",\n",
        "]\n"
      ],
      "metadata": {
        "id": "O41xxJ6-wbnz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Parâmetros da requisição\n",
        "url = \"https://dashboard.juit.io/api/reporting/generate/csv\"\n",
        "\n",
        "headers = {\n",
        "  \"Content-Type\": \"application/json\",\n",
        "  'kbn-xsrf': 'kibana'\n",
        "}\n",
        "payload = {\n",
        "  \"jobParams\": {\n",
        "    \"browserTimezone\": \"America/Sao_Paulo\",\n",
        "    \"conflictedTypesFields\": [\"!\"],\n",
        "    \"fields\": campos,\n",
        "    # ... (substitua \"!\" pelos campos desejados)\n",
        "  },\n",
        "  \"indexPatternId\": \"09397850-73a9-11ea-b213-19971ce3ce0d\",\n",
        "  \"metaFields\": meta_fields,\n",
        "  \"objectType\": \"search\",\n",
        "  \"searchRequest\": {\n",
        "    \"body\": {\n",
        "      \"_source\": {\n",
        "        \"excludes\": [\"!\"]\n",
        "      },\n",
        "      \"docvalue_fields\": [\"!\"],\n",
        "      # ... (substitua \"!\" pelas configurações desejadas)\n",
        "    },\n",
        "    \"query\": {\n",
        "      \"bool\": {\n",
        "        \"filter\": [\"!\"],\n",
        "        # ... (substitua \"!\" pelas configurações desejadas)\n",
        "      }\n",
        "    }\n",
        "  },\n",
        "  \"script_fields\": {},\n",
        "  \"sort\": [\"!\"],\n",
        "  \"stored_fields\": [\"'*\\'\"],\n",
        "  \"version\": \"t\",\n",
        "  \"index\": \"jurisprudence*\",\n",
        "  \"title\": \"TJSP_2023_OBITO\"\n",
        "}\n",
        "\n",
        "# Realiza a requisição\n",
        "response = requests.post(url, headers=headers, json=payload)\n",
        "\n",
        "# Verifica o status da requisição\n",
        "if response.status_code == 200:\n",
        "  # Salva o conteúdo em um arquivo CSV\n",
        "  with open(\"resultado.csv\", \"wb\") as f:\n",
        "    f.write(response.content)\n",
        "  print(\"Arquivo CSV salvo com sucesso!\")\n",
        "else:\n",
        "  print(f\"Erro na requisição: {response.status_code}\")\n",
        "  print(response.text)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nilzcFrwvIkk",
        "outputId": "44ad9469-f22a-432e-db42-f6a8ddec184e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Erro na requisição: 400\n",
            "{\"statusCode\":400,\"error\":\"Bad Request\",\"message\":\"[request body]: types that failed validation:\\n- [request body.0.jobParams]: expected value of type [string] but got [Object]\\n- [request body.1]: expected value to equal [null]\"}\n"
          ]
        }
      ]
    }
  ]
}